read = """
DgError DgStreamRead{easy}(DgStream *context, {real}* data) {
	/**
	 * Read an {easy} from the stream, with a fallback value
	 * 
	 * @param context Stream object
	 * @param data Where to put the result
	 * @return {easy} Error code
	 */
	
	return DgStreamRead(context, sizeof *data, data);
}

"""

read_decl = "DgError DgStreamRead{easy}(DgStream *context, {real}* data);\n"

write = """
DgError DgStreamWrite{easy}(DgStream *context, {real} data) {
	/**
	 * Write a {easy} to a stream.
	 * 
	 * @param context Stream object
	 * @param data The {easy} to write
	 * @return Error code
	 */
	
	return DgStreamWrite(context, sizeof data, &data);
}

"""

write_decl = "DgError DgStreamWrite{easy}(DgStream *context, {real} data);\n"

types_and_names = [
	["Int8", "int8_t"],
	["UInt8", "uint8_t"],
	["Int16", "int16_t"],
	["UInt16", "uint16_t"],
	["Int32", "int32_t"],
	["UInt32", "uint32_t"],
	["Int64", "int64_t"],
	["UInt64", "uint64_t"],
	["Float32", "float"],
	["Float64", "double"],
]

c = open("storage_generated.c", "w")
h = open("storage_generated.h", "w")

c.write("// Auto-generated by generate_serialise_for_types.py\n")
c.write("// Reads\n")
for t in types_and_names:
	c.write(read.replace("{easy}", t[0]).replace("{real}", t[1]))

c.write("// Writes\n")
for t in types_and_names:
	c.write(write.replace("{easy}", t[0]).replace("{real}", t[1]))

h.write("// Auto-generated by generate_serialise_for_types.py\n")
h.write("// Reads\n")
for t in types_and_names:
	h.write(read_decl.replace("{easy}", t[0]).replace("{real}", t[1]))

h.write("// Writes\n")
for t in types_and_names:
	h.write(write_decl.replace("{easy}", t[0]).replace("{real}", t[1]))

c.close()
h.close()
